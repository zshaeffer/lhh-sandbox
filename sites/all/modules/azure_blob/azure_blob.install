<?php

/**
 * @file
 * Install, update and uninstall functions for the Windows Azure Blob module.
 * 
 * @author Damien Tournoud (Windows Azure Integration Developer), atuyo60
 */

/**
 * Implements hook_schema().
 */
function azure_blob_schema() {
  $schema = array();
  
  $schema['azure_blob'] = array(
    'description' => 'Contains exportable Windows Azure Storage configurations.',
    'export' => array(
      'identifier' => 'azure_blob',
      'bulk export' => TRUE,
      'primary key' => 'id',
      'api' => array(
        'owner' => 'azure_blob',
        'api' => 'default_azure_blob',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'description' => 'A database primary key to ensure uniqueness',
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Unique ID for this configuration. Used to identify it programmatically.',
      ),
      'account' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Name of the Windows Azure Storage account.',
      ),
      'primary_key' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Primary access key of the Windows Azure Storage account.',
      ),
      'blob_container' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Name of the container to use.',
      ),
      'cache_control' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'The Cache-Control header to use.',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'name' => array('name'),
    )
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 * 
 * Checks for dependencies before installation.
 * 
 * @param string $phase
 *   The phase in which requirements are checked:
 *   - install: The module is being installed
 *   - update: The module is enabled and update.php is run
 *   - runtime: The runtime requirements are being checked and shown on the status report page
 * 
 * @return array
 *   An associative array where the keys are arbitrary but must be unique
 */
function azure_blob_requirements($phase) {
  if ($phase === 'install')
  {
    $requirements = array();
    
    if (!ini_get('allow_url_fopen')) {
      $requirements['azure_blob'] = array(
          'title' => 'PHP setting for allow_url_fopen is Off',
          'description' => 'The Windows Azure SDK for PHP requires the PHP configuration setting "allow_url_fopen" to be On.',
          'severity' => REQUIREMENT_ERROR,
      );
      
      return $requirements;
    }
    
    $module_path = drupal_get_path('module', 'azure_blob');
    
    if (!is_file($module_path . '/lib/vendor/autoload.php')) {
      $output = array();
      $exit_code = 0;

      // Prevent timeout
      drupal_set_time_limit(0);

      // Store current working directory
      $cwd = getcwd();
      // Change to directory of the composer.json file
      chdir($module_path . '/lib');
      // http://jamieonsoftware.com/journal/tag/composer
      // Composer requires allow_url_fopen so set the runtime config
      exec('php.exe -d allow_url_fopen=1 composer.phar install', $output, $exit_code);
      // Restore current working directory
      chdir($cwd);

      // Ensure the required libraries have been downloaded or exist
      if ($exit_code !== 0) {
        // Execute will also fail if PHP is not set in the environment variable
        $requirements['azure_blob'] = array(
            'title' => 'Missing PHP Client Libraries for Windows Azure',
            'description' => 'Failed to download and install required libraries.',
            'severity' => REQUIREMENT_ERROR,
        );

        return $requirements;
      }
    }
  }
}
